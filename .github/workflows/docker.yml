name: docker
 
on:
  push:
    branches: [ main ]
 
jobs:
  verify:
    runs-on: ubuntu-latest
 
    steps: 
    - name: Checkout repository
      uses: actions/checkout@v4
 
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
 
    - name: Pull latest image for cache
      run: |
        docker pull ${{ secrets.DOCKER_USER }}/homeworklinux:latest || true
 
    - name: Build Docker image with cache
      run: | 
        docker build \
          --cache-from ${{ secrets.DOCKER_USER }}/homeworklinux:latest \
          -t ${{ secrets.DOCKER_USER }}/homeworklinux:build-${{ github.sha }} \
          -t ${{ secrets.DOCKER_USER }}/homeworklinux:latest \
          -f docker/Dockerfile \
          docker/
 
        echo "Docker image built successfully"
        docker images | grep ${{ secrets.DOCKER_USER }}/homeworklinux
 
    - name: Push latest image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ secrets.DOCKER_USER }}/homeworklinux:build-${{ github.sha }}
        docker push ${{ secrets.DOCKER_USER }}/homeworklinux:latest
 
  test:
    runs-on: ubuntu-latest
    needs: verify
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s
 
    steps:
      - uses: actions/checkout@v4
      
      - name: Pull built image
        run: |
          echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
          docker pull ${{ secrets.DOCKER_USER }}/homeworklinux:build-${{ github.sha }}
 
      - name: Run tests
        run: |
          docker run --network host \
            -e TESTING=1 \
            ${{ secrets.DOCKER_USER }}/homeworklinux:build-${{ github.sha }} pytest -v ./tests/
 
  deploy:
    runs-on: self-hosted
    needs: [ test ]
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~/tasks/docker
            ./restart.sh
