name: docker

on:
  push:
    branches: [ main ]

jobs:
  verify:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: docker/
        file: docker/Dockerfile
        tags: |
          ${{ secrets.DOCKER_USER }}/homeworklinux:build-${{ github.sha }}
          ${{ secrets.DOCKER_USER }}/homeworklinux:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        outputs: type=docker

    - name: Save Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: /tmp/docker-image.tar

  test:
    runs-on: ubuntu-latest
    needs: verify
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s

    steps:
      - uses: actions/checkout@v4
      
      - name: Load Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: /tmp

      - name: Load image into Docker
        run: docker load -i /tmp/docker-image.tar

      - name: Run tests
        run: |
          docker run --network host \
            -e TESTING=1 \
            ${{ secrets.DOCKER_USER }}/homeworklinux:build-${{ github.sha }} pytest -v ./tests/

  deploy:
    runs-on: self-hosted
    needs: [ test ]
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~/tasks/docker
            chmod +x restart.sh
            ./restart.sh
